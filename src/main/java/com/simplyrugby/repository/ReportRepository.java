package com.simplyrugby.repository;

import com.simplyrugby.domain.Report;
import java.util.Date;
import java.util.List;

/**
 * Repository interface for Report entity operations.
 */
public interface ReportRepository {
    /**
     * Find a report by ID
     * 
     * @param id The report ID
     * @return The report or null if not found
     */
    Report findById(int id);
    
    /**
     * Find all reports
     * 
     * @return List of all reports
     */
    List<Report> findAll();
    
    /**
     * Find reports by title (partial match)
     * 
     * @param title The title to search for
     * @return List of matching reports
     */
    List<Report> findByTitle(String title);
    
    /**
     * Find reports by type
     * 
     * @param reportType The report type
     * @return List of reports with the given type
     */
    List<Report> findByType(String reportType);
    
    /**
     * Find reports generated by a specific user
     * 
     * @param generatedBy The username of the user who generated the reports
     * @return List of reports generated by the user
     */
    List<Report> findByGeneratedBy(String generatedBy);
    
    /**
     * Find reports generated after a specific date
     * 
     * @param date The date
     * @return List of reports generated after the date
     */
    List<Report> findReportsAfterDate(Date date);
    
    /**
     * Find reports generated before a specific date
     * 
     * @param date The date
     * @return List of reports generated before the date
     */
    List<Report> findReportsBeforeDate(Date date);
    
    /**
     * Find reports generated between two dates
     * 
     * @param startDate The start date
     * @param endDate The end date
     * @return List of reports generated between the dates
     */
    List<Report> findReportsBetweenDates(Date startDate, Date endDate);
    
    /**
     * Save a new report
     * 
     * @param report The report to save
     * @return The ID of the newly created report
     */
    int save(Report report);
    
    /**
     * Update an existing report
     * 
     * @param report The report to update
     * @return True if the update was successful
     */
    boolean update(Report report);
    
    /**
     * Delete a report by ID
     * 
     * @param id The report ID to delete
     * @return True if the deletion was successful
     */
    boolean delete(int id);
    
    /**
     * Find the most recent reports
     * 
     * @param limit The maximum number of reports to return
     * @return List of recent reports
     */
    List<Report> findRecentReports(int limit);
}