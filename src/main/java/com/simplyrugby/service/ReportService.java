package com.simplyrugby.service;

import com.simplyrugby.domain.Report;
import com.simplyrugby.util.EntityNotFoundException;
import com.simplyrugby.util.ValidationException;

import java.util.Date;
import java.util.List;

/**
 * Service interface for Report entity operations.
 */
public interface ReportService {
    /**
     * Get a report by ID
     *
     * @param id The report ID
     * @return The report
     * @throws EntityNotFoundException If the report doesn't exist
     */
    Report getReportById(int id);

    /**
     * Get all reports
     *
     * @return List of all reports
     */
    List<Report> getAllReports();

    /**
     * Get reports by title (partial match)
     *
     * @param title The title to search for
     * @return List of matching reports
     */
    List<Report> getReportsByTitle(String title);

    /**
     * Get reports by type
     *
     * @param reportType The report type
     * @return List of reports with the given type
     */
    List<Report> getReportsByType(String reportType);

    /**
     * Get reports generated by a specific user
     *
     * @param generatedBy The username of the user who generated the reports
     * @return List of reports generated by the user
     */
    List<Report> getReportsByGenerator(String generatedBy);

    /**
     * Get reports generated after a specific date
     *
     * @param date The date
     * @return List of reports generated after the date
     */
    List<Report> getReportsAfterDate(Date date);

    /**
     * Get the most recent reports
     *
     * @param limit The maximum number of reports to return
     * @return List of recent reports
     */
    List<Report> getRecentReports(int limit);

    /**
     * Add a new report
     *
     * @param report The report to add
     * @return The ID of the newly created report
     * @throws ValidationException If the report data is invalid
     */
    int addReport(Report report);

    /**
     * Update an existing report
     *
     * @param report The report to update
     * @return True if the update was successful
     * @throws ValidationException If the report data is invalid
     * @throws EntityNotFoundException If the report doesn't exist
     */
    boolean updateReport(Report report);

    /**
     * Delete a report by ID
     *
     * @param id The report ID to delete
     * @return True if the deletion was successful
     * @throws EntityNotFoundException If the report doesn't exist
     */
    boolean deleteReport(int id);

    /**
     * Generate an attendance report
     *
     * @param squadId The squad ID (optional)
     * @param dateRange The date range (optional)
     * @return The generated report content
     */
    String generateAttendanceReport(Integer squadId, String dateRange);

    /**
     * Generate a skills report
     *
     * @param playerId The player ID (optional)
     * @param squadId The squad ID (optional)
     * @return The generated report content
     */
    String generateSkillsReport(Integer playerId, Integer squadId);

    /**
     * Generate a games report
     *
     * @param squadId The squad ID (optional)
     * @param dateRange The date range (optional)
     * @return The generated report content
     */
    String generateGamesReport(Integer squadId, String dateRange);

    /**
     * Validate report data
     *
     * @param report The report to validate
     * @throws ValidationException If the report data is invalid
     */
    void validateReport(Report report);
}