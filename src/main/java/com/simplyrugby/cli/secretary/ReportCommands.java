package com.simplyrugby.cli.secretary;

import com.simplyrugby.domain.Report;
import com.simplyrugby.service.ReportService;
import com.simplyrugby.util.DependencyManager;
import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.concurrent.Callable;

@Command(
        name = "reports",
        description = "Generate and manage reports",
        subcommands = {
                ReportCommands.ListCommand.class,
                ReportCommands.ViewCommand.class,
                ReportCommands.GenerateCommand.class,
                ReportCommands.DeleteCommand.class,
                CommandLine.HelpCommand.class
        },
        mixinStandardHelpOptions = true
)
public class ReportCommands implements Runnable {

    @Override
    public void run() {
        System.out.println("\n==================================");
        System.out.println("           REPORTS PANEL");
        System.out.println("==================================\n");
        System.out.println("Available commands:");
        System.out.println("  list     - List all reports");
        System.out.println("  view     - View report details");
        System.out.println("  generate - Generate a new report");
        System.out.println("  delete   - Delete a report");
        System.out.println("  help     - Show help\n");
    }

    @Command(name = "list", description = "List all reports")
    static class ListCommand implements Callable<Integer> {
        @Option(names = {"-t", "--type"}, description = "Filter by report type")
        String reportType;

        @Override
        public Integer call() {
            ReportService reportService = DependencyManager.getReportService();

            try {
                List<Report> reports;

                if (reportType != null) {
                    System.out.printf("\n=== %s Reports ===\n\n", reportType);
                    reports = reportService.getReportsByType(reportType);
                } else {
                    System.out.println("\n=== All Reports ===\n");
                    reports = reportService.getAllReports();
                }

                // Display reports table
                if (reports.isEmpty()) {
                    System.out.println("No reports found.");
                } else {
                    System.out.printf("%-4s %-30s %-15s %-20s %-12s\n",
                            "ID", "Title", "Type", "Generated By", "Date");
                    System.out.println("-".repeat(85));

                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

                    for (Report report : reports) {
                        System.out.printf("%-4d %-30s %-15s %-20s %-12s\n",
                                report.getReportId(),
                                truncate(report.getTitle(), 30),
                                report.getReportType(),
                                report.getGeneratedBy(),
                                sdf.format(report.getGeneratedDate()));
                    }
                    System.out.println();
                }

                return 0;
            } catch (Exception e) {
                System.err.println("Error: " + e.getMessage());
                return 1;
            }
        }

        private String truncate(String text, int length) {
            if (text == null) return "";
            if (text.length() <= length) return text;
            return text.substring(0, length - 3) + "...";
        }
    }

    @Command(name = "view", description = "View report details")
    static class ViewCommand implements Callable<Integer> {
        @Parameters(index = "0", description = "Report ID")
        int reportId;

        @Override
        public Integer call() {
            ReportService reportService = DependencyManager.getReportService();

            try {
                Report report = reportService.getReportById(reportId);

                System.out.println("\n=== Report Details ===\n");

                System.out.println("ID:           " + report.getReportId());
                System.out.println("Title:        " + report.getTitle());
                System.out.println("Type:         " + report.getReportType());
                System.out.println("Generated By: " + report.getGeneratedBy());
                System.out.println("Date:         " + report.getFormattedDate());

                System.out.println("\nContent:");
                System.out.println("-".repeat(80));
                System.out.println(report.getContent());
                System.out.println("-".repeat(80));

                return 0;
            } catch (Exception e) {
                System.err.println("Error: " + e.getMessage());
                return 1;
            }
        }
    }

    @Command(name = "generate", description = "Generate a new report")
    static class GenerateCommand implements Callable<Integer> {
        @Option(names = {"-t", "--type"}, description = "Report type", required = true)
        String reportType;

        @Option(names = {"-s", "--squad"}, description = "Squad ID for squad-specific reports")
        Integer squadId;

        @Option(names = {"-p", "--player"}, description = "Player ID for player-specific reports")
        Integer playerId;

        @Option(names = {"-d", "--date"}, description = "Date range (e.g., '01/01/2023-31/01/2023')")
        String dateRange;

        @Override
        public Integer call() {
            ReportService reportService = DependencyManager.getReportService();

            try {
                // Generate title based on report type
                String title;
                switch (reportType.toLowerCase()) {
                    case "attendance":
                        title = "Attendance Report";
                        if (squadId != null) {
                            title += " - Squad #" + squadId;
                        }
                        break;
                    case "skills":
                        title = "Player Skills Report";
                        if (playerId != null) {
                            title += " - Player #" + playerId;
                        }
                        break;
                    case "games":
                        title = "Games Report";
                        if (squadId != null) {
                            title += " - Squad #" + squadId;
                        }
                        break;
                    default:
                        title = reportType + " Report";
                }

                // Add date range to title if provided
                if (dateRange != null) {
                    title += " (" + dateRange + ")";
                }

                // Prepare report parameters
                Report report = new Report();
                report.setTitle(title);
                report.setReportType(reportType);
                report.setGeneratedDate(new Date());

                // Get current username (in a real app, this would be from the session)
                String username = System.getProperty("user.name");
                report.setGeneratedBy(username);

                // Generate report content based on type and parameters
                String content;
                if (reportType.equalsIgnoreCase("attendance")) {
                    content = reportService.generateAttendanceReport(squadId, dateRange);
                } else if (reportType.equalsIgnoreCase("skills")) {
                    content = reportService.generateSkillsReport(playerId, squadId);
                } else if (reportType.equalsIgnoreCase("games")) {
                    content = reportService.generateGamesReport(squadId, dateRange);
                } else {
                    content = "Custom report content for " + reportType;
                }

                report.setContent(content);

                // Save report
                int reportId = reportService.addReport(report);

                System.out.println("\nReport generated successfully with ID: " + reportId);
                System.out.println("You can view the report with the command:");
                System.out.println("  reports view " + reportId);

                return 0;
            } catch (Exception e) {
                System.err.println("Error: " + e.getMessage());
                return 1;
            }
        }
    }

    @Command(name = "delete", description = "Delete a report")
    static class DeleteCommand implements Callable<Integer> {
        @Parameters(index = "0", description = "Report ID")
        int reportId;

        @Option(names = {"-f", "--force"}, description = "Force deletion without confirmation")
        boolean force;

        @Override
        public Integer call() {
            ReportService reportService = DependencyManager.getReportService();

            try {
                // Get report for confirmation
                Report report = reportService.getReportById(reportId);

                // Confirm deletion
                if (!force) {
                    System.out.printf("\nAre you sure you want to delete report: %s (ID: %d)? (y/n) ",
                            report.getTitle(), report.getReportId());
                    String confirmation = System.console().readLine().trim().toLowerCase();

                    if (!confirmation.equals("y") && !confirmation.equals("yes")) {
                        System.out.println("\nDeletion cancelled.");
                        return 0;
                    }
                }

                // Delete report
                boolean result = reportService.deleteReport(reportId);

                if (result) {
                    System.out.println("\nReport deleted successfully.");
                    return 0;
                } else {
                    System.err.println("Failed to delete report.");
                    return 1;
                }
            } catch (Exception e) {
                System.err.println("Error: " + e.getMessage());
                return 1;
            }
        }
    }
}